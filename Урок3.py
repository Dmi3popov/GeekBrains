# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

def my_first_func():
    try:
        a = int(input("Введите число a: "))
        b = int(input("Введите число b: "))

        result = a/b
    except ZeroDivisionError:
        return "на 0 делить нельзя!"

    return result

result_final=my_first_func()
print("на 0 делить нельзя!") if result_final == "на 0 делить нельзя!" else print(f"a/b равно {result_final}")


# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.

def my_user(name, surname, birthday, city, email, phone):
    print(f"{surname} {name} - {birthday} г.р., проживает в г.{city}, эл. адрес: {email}, тел.:{phone}")

my_user(name="Иван",surname="Иванов",birthday="01.01.2000",city="Москва",email="iivanov@yandex.ru",phone=+79116078888)





# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
# и возвращает сумму наибольших двух аргументов.

def my_func(a, b, c):
    return (a+b+c-min(a, b, c))

print(my_func(20, 30, 15))




# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде
# функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции
# возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с
# помощью оператора **. Второй — более сложная реализация без оператора **,
# предусматривающая использование цикла.

def my_func(x, y):
    return (1/x)**(-y)

print(my_func(2, -3))

def my_func(x, y):
    i=1
    n=-y
    result=(1/x)
    while i < n:
        result=result*(1/x)
        i=i+1
    return result

print(my_func(1/3, -3))

# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел,
# разделенных пробелом и снова нажать Enter. Сумма вновь введенных чисел будет добавляться к
# уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы
# завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить
# сумму этих чисел к полученной ранее сумме и после этого завершить программу.

def sum_of_numbers():
    my_str=input("Введите набор чисел через пробел 'для ограничения списка нажмите +':")
    my_list=my_str.split(" ")


    if '+' in my_list:
        my_list1=my_list[:my_list.index('+')]
    else:
        my_list1=my_list[:]

    sum1 = 0
    while my_list1 != []:
        el1,*el2=my_list1
        el1=int(el1)
        my_list1.pop(0)
        sum1 = sum1+el1

    return sum1
sum1=sum_of_numbers()


a=0
while a != "no":
    a=input("Еще планируете ввести число yes/no:")
    if a == "no":
        break

    sum1=sum1+sum_of_numbers()

print(f"Сумма всех введеных чисел до символа '+' равняется {sum1}")


# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же,
# но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки,
# но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную
# ранее функцию int_func().

a=input("Введите слово из маленьких латинских букв: ")
def int_func():
    return a.title()
print(int_func())

a=input("Введите предложение из лат слов с маленьких букв: ")
int_func()
print(int_func())

